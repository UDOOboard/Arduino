<?xml version="1.0"?>
<project name="Arduino" default="build">
  <!--echo message="os.name = ${os.name}" /-->
  <!--echo message="os.arch = ${os.arch}" /-->
  <!--echo message="os.version = ${os.version}" /-->

  <!-- Sets properties for macosx/windows/linux depending on current system -->
  <condition property="platform" value="linux32"><os family="unix" arch="arm" /></condition>

  <condition property="linux32"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="linux"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="linux"><equals arg1="${platform}" arg2="linux64" /></condition>

  <condition property="staging_folder" value="linux"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="staging_folder" value="linux"><equals arg1="${platform}" arg2="linux64" /></condition>

  <condition property="staging_hardware_folder" value="Arduino.app/Contents/Resources/Java/hardware"><equals arg1="${platform}" arg2="macosx" /></condition>
  <condition property="staging_hardware_folder" value="hardware"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="staging_hardware_folder" value="hardware"><equals arg1="${platform}" arg2="linux64" /></condition>

  <condition property="arch-bits" value="32">
    <equals arg1="${platform}" arg2="linux32"/>
  </condition>
  <condition property="arch-bits" value="64">
    <equals arg1="${platform}" arg2="linux64"/>
  </condition>

  <!-- Libraries required for running arduino -->
  <fileset dir=".." id="runtime.jars">
    <include name="core/core.jar" />
    <include name="app/pde.jar" />
    <include name="app/lib/commons-codec-1.7.jar" />
    <include name="app/lib/commons-exec-1.1.jar" />
    <include name="app/lib/commons-httpclient-3.1.jar" />
    <include name="app/lib/commons-logging-1.0.4.jar" />
    <include name="app/lib/ecj.jar" />
    <include name="app/lib/jmdns-3.4.1.jar" />
    <include name="app/lib/jna.jar" />
    <include name="app/lib/jsch-0.1.50.jar" />
    <include name="app/lib/RXTXcomm.jar" />
    <include name="app/lib/ant.jar" />
    <include name="app/lib/ant-launcher.jar" />
  </fileset>

  <target name="build" description="Build Arduino.">
    <antcall target="${platform}-build" />
  </target>

  <target name="run" description="Run Arduino.">
    <antcall target="${platform}-run" />
  </target>

  <target name="dist" depends="revision-check"
	  description="Build Arduino for distribution.">
    <input message="Enter version number:"
	   addproperty="version"
	   defaultvalue="${revision}" />
    <antcall target="${platform}-dist" />
  </target>

  <!-- "ยง$ยง$&, ant doesn't have a built-in help target :(  -->
  <target name="help" description="Show project help">
    <java classname="org.apache.tools.ant.Main">
      <arg value="-p" />
    </java>
  </target>

  <target name="test" depends="subprojects-test"/>

  <!-- - - - - - - - - - - - - - - - - - -->
  <!-- Subprojects: Core, App, Libraries -->
  <!-- - - - - - - - - - - - - - - - - - -->

  <target name="subprojects-clean">
    <subant buildpath="../core" target="clean"/>
    <subant buildpath="../app" target="clean"/>
  </target>

  <target name="subprojects-build">
    <subant buildpath="../core" target="build"/>
    <subant buildpath="../app" target="build"/>
  </target>

  <target name="subprojects-test">
    <subant buildpath="../app" target="test"/>
  </target>

  <!-- - - - - - - - - -->
  <!-- Basic Assembly  -->
  <!-- - - - - - - - - -->

  <target name="assemble">
    <fail unless="target.path"
	  message="Do not call assemble from the command line." />

    <!-- copy shared tools folder -->
    <copy todir="${target.path}/tools">
      <fileset dir="shared/tools" />
    </copy>

    <!-- copy library folder -->
    <copy todir="${target.path}/libraries">
      <fileset dir="../libraries" />
    </copy>

    <!-- copy hardware folder -->
    <copy todir="${target.path}/hardware">
      <fileset dir="../hardware">
        <exclude name="arduino/sam/system/CMSIS/Device/ATMEL/*/svd/"/>
        <exclude name="arduino/sam/system/CMSIS/Device/ATMEL/*/html/"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/ARM/*M0*"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/ARM/*M4*"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/GCC/*M0*"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/GCC/*M4*"/>
      </fileset>
    </copy>

    <!-- copy shared examples folder -->
    <copy todir="${target.path}/examples">
      <fileset dir="shared/examples" />
    </copy>

    <!-- Unzip documentation -->
    <unzip dest="${target.path}" src="shared/reference.zip" overwrite="false"/>

    <!-- Write the revision file! -->
    <echo file="${target.path}/lib/version.txt" message="${version}" />
  </target>


  <!-- - - - - - - - - -->
  <!-- Revision check  -->
  <!-- - - - - - - - - -->
  <target name="revision-check">
    <!-- figure out the revision number -->
    <loadfile srcfile="shared/revisions.txt" property="revision">
      <filterchain>
        <ignoreblank />
        <headfilter lines="1"/>
        <tokenfilter>
          <linetokenizer includeDelims="false" />
          <!-- grab the thing from the first line that's 4 digits -->
          <containsregex pattern="ARDUINO (.*) " />
          <replaceregex pattern="ARDUINO ([^ ]*).*" replace="\1" />
        </tokenfilter>
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
        </tokenfilter>
      </filterchain>
    </loadfile>
    <echo message="Latest revision detected in shared/revision.txt is: ${revision}" />

    <!-- figure out the revision number in base.java -->
    <loadfile srcfile="../app/src/processing/app/Base.java"
	      property="revision.base">
      <filterchain>
        <tokenfilter>
          <linetokenizer />
          <containsregex pattern="String VERSION_NAME = "/>
          <replaceregex pattern="[^0-9]*" flags="g" replace=""/>
        </tokenfilter>
      </filterchain>
    </loadfile>
    <echo message="Revision in Base.java is: ${revision.base}" />
  </target>

  <!-- - - - - - - - -->
  <!-- Linux         -->
  <!-- - - - - - - - -->

  <target name="linux-clean" depends="subprojects-clean" description="Clean linux version">
    <delete dir="linux/work" />
    <delete>
      <fileset dir="linux" includes="arduino-*linux*.tgz"/>
    </delete>
  </target>

  <target name="linux-checkos" unless="linux">
    <echo>
      =======================================================
      Arduino for Linux can only be built on on unix systems.

      Bye.
      =======================================================
    </echo>

    <fail message="wrong platform (${os.name})" />
  </target>

  <target name="linux-build" depends="revision-check, linux-checkos, subprojects-build" description="Build linux version">
    <mkdir dir="linux/work" />

    <copy todir="linux/work">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>

    <copy todir="linux/work">
      <fileset dir="linux/dist" includes="lib/**" />
    </copy>

    <copy todir="linux/work/lib" flatten="true">
      <fileset refid="runtime.jars" />
    </copy>

    <antcall target="assemble">
      <param name="target.path" value="linux/work" />
    </antcall>

    <copy todir="linux/work" file="linux/dist/arduino" />
    <chmod perm="755" file="linux/work/arduino" />

    <mkdir dir="linux/work/hardware/tools" />
<!--    
    <copy file="linux/dist/tools/adk2install" todir="linux/work/hardware/tools" />
    <copy file="linux/dist/tools/adk2tool" todir="linux/work/hardware/tools" />
    <copy file="linux/dist/tools/avrdude${arch-bits}" tofile="linux/work/hardware/tools/avrdude" />
    <copy file="linux/dist/tools/avrdude.conf" todir="linux/work/hardware/tools" />

    <chmod perm="755" file="linux/work/hardware/tools/avrdude" />
    <chmod perm="755" file="linux/work/hardware/tools/adk2tool" />
    <chmod perm="755" file="linux/work/hardware/tools/adk2install" />
-->

    <copy file="linux/dist/tools/bossac${arch-bits}" tofile="linux/work/hardware/tools/bossac" />
    <chmod perm="755" file="linux/work/hardware/tools/bossac" />

    <copy todir="linux/work" file="linux/dist/arduino" />
    <chmod perm="755" file="linux/work/arduino" />
  </target>

  <target name="linux32-build" depends="linux-build" description="Build linux (32-bit) version">
    <!-- Unzip ARM tools -->
    <antcall target="unzip-arm-toolchain">
      <param name="dist_file" value="gcc-arm-none-eabi_4.6-2013q4.tar.gz" />
      <param name="dist_check_file" value="gcc-arm-none-eabi" />
    </antcall>

    <!-- Unzip AVR tools -->
<!-- TODO not ready yet 
    <exec executable="tar" dir="linux/work/hardware">
      <arg value="-xjf"/>
      <arg value="../../avr_tools_linux32.tar.bz2"/>
    </exec>
  </target>

  <target name="linux64-build" depends="linux-build" description="Build linux (64-bit) version">
    <copy tofile="linux/work/hardware/tools/avrdude" file="linux/dist/tools/avrdude64" overwrite="true" />
    <copy tofile="linux/work/lib/librxtxSerial.so" file="linux/dist/lib/librxtxSerial64.so" overwrite="true" />

    <chmod perm="755" file="linux/work/hardware/tools/avrdude" />
-->
    <!-- Unzip ARM tools -->
    <antcall target="unzip-arm-toolchain">
      <param name="dist_file" value="gcc-arm-none-eabi_4.6-2013q4.tar.gz" />
      <param name="dist_check_file" value="gcc-arm-none-eabi" />
    </antcall>

    <!-- Unzip AVR tools --> 
<!-- TODO not ready yet
    <exec executable="tar" dir="linux/work/hardware">
      <arg value="-xjf"/>
      <arg value="../../avr_tools_linux64.tar.bz2"/>
    </exec>
  </target>

  <target name="linux32-run" depends="linux32-build" description="Run Linux (32-bit) version">
    <exec executable="./linux/work/arduino" spawn="false"/>
  </target>

  <target name="linux64-run" depends="linux64-build" description="Run Linux (64-bit) version">
    <exec executable="./linux/work/arduino" spawn="false"/>
  </target>
-->
  <!-- Set 'arm_disfile_available' property if ARM toolchain dist_file is downloaded             -->
  <!-- Set 'arm_toolchain_installed' property if ARM toolchain is installed in working directory -->
  <target name="check-arm-toolchain">
    <available file="${staging_folder}/dist/${dist_file}" property="arm_distfile_available" />
    <available file="${staging_folder}/work/hardware/tools/${dist_check_file}" property="arm_toolchain_installed" />
  </target>

  <!-- Retrieve ARM toolchain -->
  <!-- TODO local file available only

<target name="get-arm-toolchain" depends="check-arm-toolchain" unless="arm_distfile_available">
    <get src="${dist_url}" dest="${staging_folder}/dist/${dist_file}" verbose="true" />
  </target>

  <target name="unzip-arm-toolchain" depends="get-arm-toolchain, check-arm-toolchain"
      unless="arm_toolchain_installed">
    <checksum file="${staging_folder}/dist/${dist_file}" algorithm="sha"
      fileext=".sha" verifyproperty="checksum.matches"/>
    <condition property="checksum.matches.fail">
      <equals arg1="${checksum.matches}" arg2="false"/>
    </condition>
    <fail if="checksum.matches.fail">Checksum failed.

      File ${dist_file} failed checksum.
      Please remove "${staging_folder}/dist/${dist_file}" to download it again.
    </fail>
-->
    <!-- Unzip toolchain to the destination folder -->
    <exec executable="tar">
      <arg value="xfz"/>
      <arg value="${staging_folder}/dist/${dist_file}"/>
      <arg value="--directory=${staging_folder}/work/${staging_hardware_folder}/tools/"/>
    </exec>
  </target>

  <target name="linux-dist" depends="build"
	  description="Build .tar.gz of linux version">

    <!--get src="http://dev.processing.org/build/jre-tools-6u18-linux-i586.tgz" 
	 dest="linux/jre.tgz" 
	 usetimestamp="true" />    
    <untar compression="gzip" 
	   dest="linux/work" 
	   src="linux/jre.tgz" 
	   overwrite="false"/-->

<!--
    <tar compression="gzip" basedir="linux/work"
	 destfile="linux/arduino-${version}.tgz" />

    <tar compression="gzip" destfile="linux/arduino-${version}-linux.tgz">
      <tarfileset dir="linux/work"
		  prefix="arduino-${version}"	
		  excludes="arduino,
			    hardware/tools/avrdude,
			    java/**"
		  />
      <tarfileset file="linux/work/arduino" filemode="755" prefix="arduino-${version}" />
      <tarfileset file="linux/work/hardware/tools/avrdude" filemode="755"
		  prefix="arduino-${version}/hardware/tools" />
    </tar>
-->
    <move file="linux/work" tofile="linux/arduino-${version}" />

    <exec executable="tar" dir="linux">
      <arg value="-z"/>
      <arg value="-c"/>
      <arg value="-f"/>
      <arg value="arduino-${version}-${platform}.tgz"/>
      <arg value="arduino-${version}"/>
    </exec>

    <move file="linux/arduino-${version}" tofile="linux/work" />

    <echo>
      =======================================================
      Arduino for Linux was built. Grab the archive from

      build/linux/arduino-${version}-${platform}.tgz
      =======================================================
    </echo>
  </target>

  <target name="linux32-dist" depends="linux-dist"
	  description="Build .tar.gz of linux version" />

  <target name="linux64-dist" depends="linux-dist"
	  description="Build .tar.gz of linux version" />

  <!-- - - - - - - - -->
  <!-- Source        -->
  <!-- - - - - - - - -->

   <target name="source-dist" depends="revision-check"
	  description="Build .tar.gz of source code">
    <input message="Enter version number:"
	   addproperty="version"
	   defaultvalue="${revision}" />

    <tar compression="gzip" destfile="arduino-${version}-src.tar.gz">
      <tarfileset dir="../"
		  prefix="arduino-${version}"
		  excludes="**/*.tgz,
			     **/*.bz2,
			     **/work/,
			     **/.git/,
			     **/*.class"
		  />
    </tar>

    <echo>
      =======================================================
      Arduino source distribution was built. Grab the archive from

      arduino-${version}-src.tar.gz
      =======================================================
    </echo>
  </target>


  <!-- - - - - - - - -->
  <!-- Run It!       -->
  <!-- - - - - - - - -->

  <target name="clean" description="Perform a spring cleaning"
	  depends="linux-clean, subprojects-clean">
  </target>

</project>
